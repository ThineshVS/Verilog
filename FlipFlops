//-------------- SR Flip-Flop --------------//

//Compiler: Verdi

//Design code

module srflipflop(input s, input r, input clk, input rst, output reg q, output reg qbar);
  //srFlipFlop get inputs {s,r}, reset,clk Output q and q'
  always@(posedge clk)
  //Positive edge triggered flipflop
    if(!rst) q <= 0;
  //This is neg of rst (0)' = 1 then q is 0.
     else
      begin 
        case({s,r})
          2'b00: q <= q;
          2'b10: q <= 1'b1;
          2'b01: q <= 1'b0;
          2'b11: q <= 1'bx;
        endcase 
        assign qbar = ~q;
        
          // | S (Set) | R (Reset) | Q (Output) | Q' (Complement) |
          // |---------|-----------|------------|------------------|
          // |    0    |     0     |  Q_prev    |   Q'_prev        |
          // |    0    |     1     |     0      |        1         |
          // |    1    |     0     |     1      |        0         |
          // |    1    |     1     |  Invalid   |     Invalid      |

        #1 $display("Design output s= %b r= %b q= %b q=%b reset=%b", s, r,q,qbar,rst);
      end

endmodule

c

module testb();
  reg clk, rst;
  reg s,r;
  wire q,qbar;
//srFlipFlop get inputs {s,r}, reset,clk Output q and q'
  task valueparse(bit [1:0] ip);
    //we are creating a task since we are going to change the value of {s.r} constantly.
    //we are using task since we are using timing constructs
    @(posedge clk);//while the clk is at positive edge(0-to-1).
    {s,r} = ip;//This line is used to change the value of s&r as we instantiate the clock
    #1 $display("s= %b r= %b --> q= %b qbar= %b",s,r,q,qbar);//display the values for every cycle.
  endtask
  srflipflop srff(.clk(clk), .s(s), .r(r),.rst(rst),.q(q),.qbar(qbar));//creating design instance.
  always #2 clk = ~clk; //negating clk value every 2ns
  initial begin
    clk = 0;rst = 0;//initiating clk values
    #3 rst=1;
    //setting reset equals 1 and doing some permutation&combinations of the inout values {s,r}.
    valueparse(2'b00);
    valueparse(2'b01);
    valueparse(2'b10);
    valueparse(2'b11);
    #5;
    //After 5ns we are deprecating the simulation.
    $finish;
  end       

    initial begin
      $dumpfile("dump.vcd");
      $dumpvars(1);
    end
endmodule : testb

//-------------- JK Flip-Flop --------------//

//Compiler: Verdi

//Design code

module jkflipflop(input j, input k, input clk, input rst, output reg q, output reg qbar);
  //srFlipFlop get inputs {s,r}, reset,clk Output q and q'
  always@(posedge clk)
  //Positive edge triggered flipflop
    if(!rst) q <= 0;
  //This is neg of rst (0)' = 1 then q is 0.
     else
      begin 
        case({j,k})
          2'b00: q <= q;
          2'b10: q <= 1'b1;
          2'b01: q <= 1'b0;
          2'b11: q <= ~q;
        endcase 
        assign qbar = ~q;
        
          // | J | K | Q (Next State) | Q' (Complement) |
          // |---|---|-----------------|------------------|
          // | 0 | 0 |      Q_prev     |      Q'_prev     |
          // | 0 | 1 |        0        |        1         |
          // | 1 | 0 |        1        |        0         |
          // | 1 | 1 |        Q'       |        Q         |

        #1 $display("Design output j= %b k= %b q= %b q=%b reset=%b", j, k,q,qbar,rst);
      end

endmodule

//----------Testbench

module testb();
  reg clk, rst;
  reg j,k;
  wire q,qbar;
//jkFlipFlop get inputs {j,k}, reset,clk Output q and q'
  task valueparse(bit [1:0] ip);
    //we are creating a task since we are going to change the value of {j,k} constantly.
    //we are using task since we are using timing constructs
    @(posedge clk);//while the clk is at positive edge(0-to-1).
    {j,k} = ip;//This line is used to change the value of s&r as we instantiate the clock
    #1 $display("j= %b k= %b --> q= %b qbar= %b",j,k,q,qbar);//display the values for every cycle.
  endtask
  jkflipflop jkff(.clk(clk), .j(j), .k(k),.rst(rst),.q(q),.qbar(qbar));//creating design instance.
  always #2 clk = ~clk; //negating clk value every 2ns
  initial begin
    clk = 0;rst = 0;//initiating clk values
    #3 rst=1;
    //setting reset equals 1 and doing some permutation&combinations of the inout values {j,k}.
    valueparse(2'b00);
    valueparse(2'b01);
    valueparse(2'b10);
    valueparse(2'b11);
    valueparse(2'b11);
    //This call again sets both J and K to 1, causing the output to toggle again. If the output q was 1 after the first call, it will change to 0, and if it was 0, it will change to 1.
    #5;
    //After 5ns we are deprecating the simulation.
    $finish;
  end       

    initial begin
      $dumpfile("dump.vcd");
      $dumpvars(1);
    end
endmodule : testb

//-------------- T Flip-Flop --------------//

//Compiler: Verdi

//Design code

module tflipflop(input t, input clk, input rst, output reg q, output reg qbar);
  //srFlipFlop get inputs {t}, reset,clk Output q and q'
  always@(posedge clk)
  //Positive edge triggered flipflop
    if(!rst) q <= 0;
  //This is neg of rst (0)' = 1 then q is 0.
     else
      begin 
        case({t})
          1'b0: q <= q;
          1'b1: q <= ~q;
        endcase 
        assign qbar = ~q;
        
        // | T | Q (Next State) | Q' (Complement) |
        // |---|-----------------|------------------|
        // | 0 |      Q_prev     |      Q'_prev     |
        // | 1 |      Q'         |        Q         |

        #1 $display("Design output t= %b q= %b q=%b reset=%b", t,q,qbar,rst);
      end

endmodule

//----------Testbench

module testb();
  reg clk, rst;
  reg t;
  wire q,qbar;
//tFlipFlop get inputs t, reset,clk Output q and q'
  task valueparse(bit ip);
    //we are creating a task since we are going to change the value of {t} constantly.
    //we are using task since we are using timing constructs
    @(posedge clk);//while the clk is at positive edge(0-to-1).
    t = ip;//This line is used to change the value of t as we instantiate the clock
    #1 $display("t= %b --> q= %b qbar= %b",t,q,qbar);//display the values for every cycle.
  endtask
  tflipflop tff(.clk(clk), .t(t),.rst(rst),.q(q),.qbar(qbar));//creating design instance.
  always #2 clk = ~clk; //negating clk value every 2ns
  initial begin
    clk = 0;rst = 0;//initiating clk values
    #3 rst=1;
    //setting reset equals 1 and doing some permutation&combinations of the inout values {t}.
    valueparse(1'b0);
    valueparse(1'b1);
    #5;
    //After 5ns we are deprecating the simulation.
    $finish;
  end       

    initial begin
      $dumpfile("dump.vcd");
      $dumpvars(1);
    end
endmodule : testb

//-------------- D Flip-Flop --------------//

//Compiler: Verdi

//Design code

module dflipflop(input d, input clk, input rst, output reg q, output reg qbar);
  //dFlipFlop get inputs {d}, reset,clk Output q and q'
  always@(posedge clk)
  //Positive edge triggered flipflop
    if(!rst) q <= 0;
  //This is neg of rst (0)' = 1 then q is 0.
    else 
	begin
		q <= d;
    
    assign qbar = ~q;
        
        // | T | Q (Next State) | Q' (Complement) |
        // |---|-----------------|------------------|
        // | 0 |      Q_prev     |      Q'_prev     |
        // | 1 |      Q'         |        Q         |
  #1 $display("Design output d= %b q= %b qbar=%b reset=%b", d,q,qbar,rst);
 end

endmodule

//----------Testbench

module testb();
  reg clk, rst;
  reg d;
  wire q,qbar;
//dFlipFlop get inputs d, reset,clk Output q and q'
  task valueparse(bit ip);
    //we are creating a task since we are going to change the value of {d} constantly.
    //we are using task since we are using timing constructs
    @(posedge clk);//while the clk is at positive edge(0-to-1).
    d = ip;//This line is used to change the value of t as we instantiate the clock
    #1 $display("d= %b --> q= %b qbar= %b",d,q,qbar);//display the values for every cycle.
  endtask
  dflipflop dff(.clk(clk), .d(d),.rst(rst),.q(q),.qbar(qbar));//creating design instance.
  always #2 clk = ~clk; //negating clk value every 2ns
  initial begin
    clk = 0;rst = 0;//initiating clk values
    #3 rst=1;
    //setting reset equals 1 and doing some permutation&combinations of the inout values {d}.
    valueparse(1'b0);
    valueparse(1'b1);
    #5;
    //After 5ns we are deprecating the simulation.
    $finish;
  end       

    initial begin
      $dumpfile("dump.vcd");
      $dumpvars(1);
    end
